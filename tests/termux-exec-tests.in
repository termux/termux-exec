#!@TERMUX__PREFIX@/bin/env bash

SCRIPT_LOG_LEVEL=1 # Default: `1` (OFF=0, NORMAL=1, DEBUG=2, VERBOSE=3, VVERBOSE=4 and VVVERBOSE=5)
COMMAND_TYPE="" # Default: ``
NOOP_COMMAND=0 # Default: `0`
DETECT_LEAKS=0 # Default: `0`
NO_CLEAN=0 # Default: `0`
USE_FSANITIZE_BUILDS=0 # Default: `0`
ONLY_LD_TESTS=0 # Default: `0`
NL=$'\n'

VALID_NUMBER_REGEX='^[0-9]+$'
VALID_ABSOLUTE_PATH_REGEX='^(/[^/]+)+$'

TERMUX_EXEC__TESTS_PATH="@TERMUX__PREFIX@/libexec/installed-tests/termux-exec"



function log() { local log_level="${1}"; shift; if [[ $SCRIPT_LOG_LEVEL -ge $log_level ]]; then echo "$@"; fi }
function log_literal() { local log_level="${1}"; shift; if [[ $SCRIPT_LOG_LEVEL -ge $log_level ]]; then echo -e "$@"; fi }
function log_errors() { echo "$@" 1>&2; }

##
# main `[argument...]`
##
main() {

    local return_value

    local RUN_UNIT_TESTS=0
    local RUN_RUNTIME_TESTS=0

    # Process the command arguments passed if received
    if [ $# -ne 0 ]; then
        process_arguments "$@" || return $?

        [ "$NOOP_COMMAND" = "1" ] && return 0
    else
        show_help || return $?
        return 0
    fi


    log 4 "Running \"main\""

    if [[ "$COMMAND_TYPE" == *,* ]] || [[ ",unit,runtime,all," != *",$COMMAND_TYPE,"* ]]; then
        log_errors "Invalid command_type \"$COMMAND_TYPE\" passed. Must equal 'unit', 'runtime' or 'all'."
        return 1
    fi


    log 1 "Running tests"


    [[ ",unit,all," == *",$COMMAND_TYPE,"* ]] && RUN_UNIT_TESTS=1
    [[ ",runtime,all," == *",$COMMAND_TYPE,"* ]] && RUN_RUNTIME_TESTS=1


    export @TERMUX_ENV__S_TERMUX_EXEC_TESTS@LOG_LEVEL="$SCRIPT_LOG_LEVEL"
    # shellcheck disable=SC2170
    if [ "@TERMUX_ENV__SE_TERMUX_EXEC_TESTS@LOG_LEVEL" -gt "4" ]; then
        # shellcheck disable=SC2276
        @TERMUX_ENV__S_TERMUX_EXEC_TESTS@LOG_LEVEL=4
    fi


    # Setup variables for runtime tests
    if [[ "$RUN_RUNTIME_TESTS" == "1" ]]; then
        # shellcheck disable=SC2276
        case "${@TERMUX_ENV__S_TERMUX@USER_ID:-}" in ''|*[!0-9]*|0[0-9]*) @TERMUX_ENV__S_TERMUX@USER_ID=0;; esac


        TERMUX_EXEC_TESTS__UID="$(id -u)"
        return_value=$?
        if [ $return_value -ne 0 ]; then
            log_errors "Failed to get uid"
            return $return_value
        fi


        ANDROID__BUILD_VERSION_SDK="$(getprop "ro.build.version.sdk")"
        if [[ ! "$ANDROID__BUILD_VERSION_SDK" =~ $VALID_NUMBER_REGEX ]]; then
            log_errors "Failed to get android build version sdk with getprop"
            return 1
        fi


        if [[ ! -d "$TMPDIR" ]]; then
            log_errors "The TMPDIR \"$TMPDIR\" is either not set or not a directory"
            return 1
        fi


        TERMUX_EXEC_TESTS__TMPDIR_PATH="$TMPDIR/termux-exec"

        # Ensure test directory is clean and does not contain files from previous run
        rm -rf "$TERMUX_EXEC_TESTS__TMPDIR_PATH" || return $?
        mkdir -p "$TERMUX_EXEC_TESTS__TMPDIR_PATH" || return $?
    fi


    # Run unit tests
    if [[ "$RUN_UNIT_TESTS" == "1" ]]; then
        run_unit_tests
        return_value=$?
        if [ $return_value -ne 0 ]; then
            [[ -n "$TERMUX_EXEC_TESTS__TMPDIR_PATH" ]] && [[ "$NO_CLEAN" != "1" ]] && rm -rf "$TERMUX_EXEC_TESTS__TMPDIR_PATH"
            return $return_value
        fi
    fi


    # Run runtime tests
    if [[ "$RUN_RUNTIME_TESTS" == "1" ]]; then
        run_runtime_tests
        return_value=$?
        if [ $return_value -ne 0 ]; then
            [[ "$NO_CLEAN" != "1" ]] && rm -rf "$TERMUX_EXEC_TESTS__TMPDIR_PATH"
            return $return_value
        fi

        rm -rf "$TERMUX_EXEC_TESTS__TMPDIR_PATH"
    fi

    log 1 "All tests successful"

    return 0

}



##
# run_unit_tests
##
run_unit_tests() {

    local return_value

    local unit_tests_variant="unit-tests"

    if [[ "$USE_FSANITIZE_BUILDS" == "1" ]]; then
        unit_tests_variant+="-fsanitize"
    else
        unit_tests_variant+="-nofsanitize"
    fi

    log 2 "Running \"unit\" tests ($unit_tests_variant)"

    output="$(ASAN_OPTIONS=fast_unwind_on_malloc=false:detect_leaks="$DETECT_LEAKS" LSAN_OPTIONS=report_objects="$DETECT_LEAKS" \
        "$TERMUX_EXEC__TESTS_PATH/$unit_tests_variant" 2>&1)"
    return_value=$?
    if [ $return_value -eq 0 ] ||
        { [ $return_value -eq 141 ] &&
            { [[ "$output" == *"WARNING: Can't read from symbolizer at fd"* ]] ||
              [[ "$output" == *"WARNING: external symbolizer didn't start up correctly!"* ]]
            } &&
            [[ "$output" == *"End \"unit\" tests"* ]];
        }; then
        log 1 "$output"
    else
        log_errors "$output"
        log_errors "Unit tests failed"
        return $return_value
    fi

    return 0

}



##
# run_runtime_tests
##
run_runtime_tests() {

    local return_value

    log 2 "Running \"runtime\" tests"

    run_runtime_binary_tests || return $?

    run_runtime_script_tests || return $?

    return 0

}

##
# run_runtime_binary_tests
##
run_runtime_binary_tests() {

    local return_value

    local runtime_binary_tests_variant="runtime-binary-tests"

    if [[ "$USE_FSANITIZE_BUILDS" == "1" ]]; then
        runtime_binary_tests_variant+="-fsanitize"
    else
        runtime_binary_tests_variant+="-nofsanitize"
    fi

    if [ "$ANDROID__BUILD_VERSION_SDK" -ge 28 ] && [ -f "$TERMUX_EXEC__TESTS_PATH/${runtime_binary_tests_variant}28" ]; then
        runtime_binary_tests_variant+="28"
    fi

    log 3 "Running \"runtime_binary\" tests ($runtime_binary_tests_variant)"
    ASAN_OPTIONS=fast_unwind_on_malloc=false:detect_leaks="$DETECT_LEAKS" LSAN_OPTIONS=report_objects="$DETECT_LEAKS" \
        "$TERMUX_EXEC__TESTS_PATH/$runtime_binary_tests_variant"
    return_value=$?
    if [ $return_value -ne 0 ]; then
        log_errors "Runtime binary tests failed"
        return $return_value
    fi

}

##
# run_runtime_script_tests
##
run_runtime_script_tests() {

    local return_value

    log 3 "Running \"runtime_script\" tests"

    source "$TERMUX_EXEC__TESTS_PATH/runtime-script-tests" || return $?

    runtime_script_tests_main || return $?
    return_value=$?
    if [ $return_value -ne 0 ]; then
        log_errors "Runtime script tests failed"
        return $return_value
    fi

    return 0
}





##
# process_arguments `[argument...]`
##
process_arguments() {

    local opt; local arg; local OPTARG; local OPTIND

    # Parse options to termux-am command
    while getopts ":fhlqv-:" opt; do
        case "${opt}" in
            -)
                arg="${OPTARG#*=}"
                case "${OPTARG}" in
                    help)
                        show_help
                        NOOP_COMMAND=1; return 0
                        ;;
                    quiet)
                        SCRIPT_LOG_LEVEL=0
                        ;;
                    no-clean)
                        NO_CLEAN=1
                        ;;
                    only-ld-tests)
                        ONLY_LD_TESTS=1
                        ;;
                    ld-preload=?*)
                        export LD_PRELOAD="$arg"
                        ;;
                    ld-preload | ld-preload=)
                        log_errors "No parameters set for option: '--${OPTARG%=*}'"
                        return 1
                        ;;
                    tests-path=?*)
                        export TERMUX_EXEC__TESTS_PATH="$arg"
                        ;;
                    tests-path | tests-path=)
                        log_errors "No parameters set for option: '--${OPTARG%=*}'"
                        return 1
                        ;;
                    '' ) # "--" terminates argument processing to support non-options that start with dashes
                        break
                        ;;
                    *)
                        :;;
                esac
                ;;
            f)
                USE_FSANITIZE_BUILDS=1
                ;;
            h)
                show_help
                NOOP_COMMAND=1; return 0
                ;;
            l)
                DETECT_LEAKS=1
                ;;
            q)
                SCRIPT_LOG_LEVEL=0
                ;;
            v)
                if [ "$SCRIPT_LOG_LEVEL" -lt "5" ]; then
                    SCRIPT_LOG_LEVEL=$((SCRIPT_LOG_LEVEL+1));
                else
                    log_errors "Invalid Option, max log level is 5"
                    return 1
                fi
                ;;
            \?)
                :;;
        esac
    done
    shift $((OPTIND - 1)) # Remove already processed arguments from argument list

    if [ $# -ne 1 ]; then
        log_errors "Expected 1 argument for command type but passed: $*"
    fi

    COMMAND_TYPE=$1;

    return 0;

}

##
# show_help
##
show_help() {

    cat <<'HELP_EOF'
termux-exec-tests is a wrapper script for testing termux-exec.

Usage:
    termux-exec-tests [command_options] command

Available commands:
    unit                     Run unit tests.
    runtime                  Run runtime on-device tests.
    all                      Run all tests.

Available command_options:
    [ -h | --help ]          Display this help screen.
    [ -f ]                   Use fsanitize binaries for AddressSanitizer.
    [ -l ]                   Detect memory leaks with LeakSanitizer.
                             Requires '-f` to be passed.
    [ --ld-preload=<path> ]  The path to 'libtermux-exec.so'.
    [ --tests-path=<path> ]  The path to installed-tests directory.
    [ --no-clean ]           Do not clean test files on failure.
    [ --only-ld-tests ]      Only run LD_PRELOAD termux-exec runtime tests.
    [ -q | -quiet ]          Set log level to 'OFF'.
    [ -v | -vv | -vvv | -vvvvv ]  Set log level to 'DEBUG', 'VERBOSE', `VVERBOSE'
                                  and `VVVERBOSE'.

HELP_EOF

}

main "$@"
